---
title: "State of the Ecosystem - Mid-Atlantic Bight"
author: "Northeast Fisheries Science Center"
date: 'June 01, 2018'
graphics: yes
output:
  pdf_document:
    includes:
      in_header: preamble-latex.tex
    keep_tex: yes
    pandoc_args: --latex-engine=xelatex
    toc: no
  html_document:
    toc: yes
fontsize: 11pt
header-includes: 
- \usepackage{float}
- \usepackage[bottom]{footmisc}
geometry: margin=1cm, footskip=.5cm
self_contained: no
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r Directory and Data Set-up, echo=F, message=F, warning=FALSE, paged.print=TRUE}
#data.dir  <- '/home/slucey/EcoAP/SOE/2018'
#image.dir <- '/home/slucey/EcoAP/SOE/2018/images'
#data.dir <- 'Z:\\SOE2017\\data'
#image.dir <- 'Z:\\SOE2017\\images'
data.dir  <- "c:/users/sean.hardison/documents/soe_compile"
image.dir <- "c:/users/sean.hardison/documents/soe_compile/images"
gis.dir <- 'c:/users/sean.hardison/documents/soe_compile/gis'
# data.dir  <- '/users/sgaichas/Documents/0_Data/ESR/SOE2018'
# image.dir <- '/users/sgaichas/Documents/0_Data/ESR/SOE2018/images'
# gis.dir <- '/users/sgaichas/Documents/0_Data/ESR/SOE2018/usa_shape_files'

#STOP HERE
#Do you have the most updated version of the SOE.data.2018 dataset AND the necessary spatial data? Check the SOE_MAB google drive for most recent version.


load(file.path(data.dir, "SOE_data_2018.Rdata"))
# latex figure folder
knitr::opts_chunk$set(echo = FALSE, fig.path = './iea_figs_MAB/', warning = F, message = F)

#The map_figs option can be set to FALSE to skip making maps on the fly (they will be missing). Or TRUE to make them. Some printers have issues with how knitr compiles maps in this document. Turn printer_friendly to TRUE to load maps from .png files. Image files can be found on the google drive directory /SOE_figures/images/. Email sean.hardison@noaa.gov for copies of these images.

map_figs <- T
printer_friendly <- T

```

```{r libraries, echo=F, message=F, warning=FALSE, paged.print=TRUE, results = 'hide'}
library(Kendall);library(data.table);library(zoo)
library(dplyr);library(nlme);library(AICcmodavg)
library(colorRamps);library(Hmisc);library(rgdal)
library(maps);library(raster);library(mapdata)
library(grid);library(stringr);library(png)
library(ncdf4);library(marmap); library(magick);
library(knitr)


#get map data and set constants
#projection
map.crs <- CRS("+proj=longlat +lat_1=35 +lat_2=45 +lat_0=40 +lon_0=-77 +x_0=0
               +y_0=0 +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")

#coastline
coast <- readOGR(gis.dir, 'NES_LME_coast', verbose = F)
coast <- spTransform(coast,map.crs)

#bathymetry
bathy <- raster(paste0(gis.dir,"/NES_bathymetry.tif"))
e  <- extent(-78.5, -64, 33, 45)
bathy <- crop(bathy, e)

#define extents for cropping
e  <- extent(-77.2, -64.2, 35, 48)
th_extent <-extent(-77,-65,35,45) #thermal habitat

#crop bathymetry
th <- crop(bathy,th_extent)

#projections
projection(th) <- map.crs
projection(bathy) <- map.crs

#get strata files to clip thermal habitat projections
strata <- readOGR(gis.dir,"strata", verbose = F)
strata@proj4string <- map.crs


```

```{r libraries and functions, include=F, echo = F}
options(repos = c(CRAN = "http://cran.rstudio.com"))


fit_lm <- function(dat) {
  # Remove missing values first so that all models
  # use the same number of observations (important for AIC)
  # dat <- dat %>% dplyr::filter(complete.cases(.))
  
  # Constant model (null model used to calculate 
  # overall p-value)
  constant_norm <-
    nlme::gls(series ~ 1, 
              data = dat)
  
  constant_ar1 <-
    try(nlme::gls(series ~ 1,
                  data = dat,
                  correlation = nlme::corAR1(form = ~time)))
  if (class(constant_ar1) == "try-error"){
    return(best_lm <- data.frame(model = NA,
                                 aicc  = NA,
                                 coefs..Intercept = NA,
                                 coefs.time = NA,
                                 coefs.time2 = NA,
                                 pval = NA)) 
  } 
  
  
  
  # Linear model with normal error
  linear_norm <- 
    nlme::gls(series ~ time, 
              data = dat)
  
  # Linear model with AR1 error
  linear_ar1 <- 
    try(nlme::gls(series ~ time, 
                  data = dat,
                  correlation = nlme::corAR1(form = ~time)))
  if (class(linear_ar1) == "try-error"){
    return(best_lm <- data.frame(model = NA,
                                 aicc  = NA,
                                 coefs..Intercept = NA,
                                 coefs.time = NA,
                                 coefs.time2 = NA,
                                 pval = NA))
    
  }
  
  # Polynomial model with normal error
  dat$time2 <- dat$time^2
  poly_norm <- 
    nlme::gls(series ~ time + time2, 
              data = dat)
  
  # Polynomial model with AR1 error
  poly_ar1 <- 
    try(nlme::gls(series ~ time + time2, 
                  data = dat,
                  correlation = nlme::corAR1(form = ~time)))
  if (class(poly_ar1) == "try-error"){
    return(best_lm <- data.frame(model = NA,
                                 aicc  = NA,
                                 coefs..Intercept = NA,
                                 coefs.time = NA,
                                 coefs.time2 = NA,
                                 pval = NA))
    
  }
  
  # Calculate AICs for all models
  df_aicc <-
    data.frame(model = c("poly_norm",
                         "poly_ar1",
                         "linear_norm",
                         "linear_ar1"),
               aicc  = c(AICc(poly_norm),
                         AICc(poly_ar1),
                         AICc(linear_norm),
                         AICc(linear_ar1)),
               coefs = rbind(coef(poly_norm),
                             coef(poly_ar1),
                             c(coef(linear_norm), NA),
                             c(coef(linear_ar1),  NA)),
               # Calculate overall signifiance (need to use
               # ML not REML for this)
               pval = c(anova(update(constant_norm, method = "ML"),
                              update(poly_norm, method = "ML"))$`p-value`[2],
                        anova(update(constant_ar1, method = "ML"),
                              update(poly_ar1, method = "ML"))$`p-value`[2],
                        anova(update(constant_norm, method = "ML"),
                              update(linear_norm, method = "ML"))$`p-value`[2],
                        anova(update(constant_ar1, method = "ML"),
                              update(linear_ar1, method = "ML"))$`p-value`[2]))
  
  best_lm <-
    df_aicc %>%
    dplyr::filter(aicc == min(aicc))
  
  
  if (best_lm$model == "poly_norm") {
    model <- poly_norm
  } else if (best_lm$model == "poly_ar1") {
    model <- poly_ar1
  } else if (best_lm$model == "linear_norm") {
    model <- linear_norm
  } else if (best_lm$model == "linear_ar1") {
    model <- linear_ar1
  }
  
  return(list(p = best_lm$pval,
              model = model))
}


#Plot new figure - Set end.start to 10 years before end of time series

soe.plot <- function(data, x.var, y.var, x.label = '', y.label = '', tol = 0.1,
                     x.start = NA, x.end = NA, end.start = 2008, bg.col = background, mean_line = T,
                     end.col = recent, stacked = NA, x.line = 2.5, y.line = 3.5, scale.axis = 1,
                     rel.y.num = 1.5, rel.y.text = 1.5, suppressAxis = FALSE,status  = F,anomaly = F,
                     endshade = TRUE, full.trend = TRUE, point.cex = 1.5, lwd = 2, ymax = TRUE,ymin = TRUE,
                     y.upper = y.upper, y.lower = y.lower, extra = FALSE, x.var2 = x.var2, y.var2 = y.var2,
                     line.forward = FALSE, mean_line.2 = T, cex.stacked = 1, website = T) {
  
  #print("You'll need to remove or interpolate NA values before this function will work")
  
  #Select Data
  x <- data[Var == y.var, ]
  x <- x[order(x[, get(x.var)]), ]
  setnames(x, x.var, 'X')
  
  #Set common time step if necessary
  if(is.na(x.start)) x.start <- min(x[, X])
  if(is.na(x.end))   x.end   <- max(x[, X])
  x <- x[X >= x.start, ]
  
  #Set up plot parameters
  if (ymax == TRUE){
    y.max <- max(x[, Value]) + tol * max(x[, Value])
  } else {
    y.max <- as.numeric(y.upper)
  }
  
  if (ymin == TRUE){
    y.min <- min(x[, Value]) - tol * abs(min(x[, Value]))
  } else if (ymin == FALSE){
    y.min <- as.numeric(y.lower)
  }
  
  y.mean <- mean(x[, Value])
  y.sd <- sd(x[, Value])
  
  #Plot blank plot
  plot(x[X >= x.start, list(X, Var)], xlim = c(x.start, x.end),
       ylim = c(y.min,y.max), xlab = '', ylab = '', axes = F, ty = 'n')


  #Add background
  u <- par('usr')
  rect(u[1], u[3], u[2], u[4], border = NA, col = bg.col)
  
  #Add end period shading
  if (endshade == TRUE){
    rect(end.start - 0.5, u[3], u[2], u[4], border = NA, col = end.col)
  }
  
  #Add mean line
  if (anomaly == F){
      if (mean_line == TRUE){
      abline(h = y.mean, col = 'grey', lwd = 3, lty = 2)
      } 
  } else if (anomaly == TRUE){
      abline(h = 0, col = 'grey', lwd = 3, lty = 2)
  }
  
  #Add x y lines
  abline(h = u[3], lwd=3)
  abline(v = u[1], lwd=3)
  
  #Add data points/lines
  points(x[, list(X, Value)], pch = 16, cex = point.cex)
  lines( x[, list(X, Value)], lwd = lwd)
  
  #extra lines
  if (extra == TRUE){
    x2 <- data[Var == y.var2, ]
    x2 <- x2[order(x2[, get(x.var2)]), ]
    setnames(x2, x.var2, 'X2')
    x2 <- x2[X2 >= x.start, ]
    if (mean_line.2 == TRUE){
     abline(h = mean(x2[, Value]), col = 'lightcoral', lwd = 3, lty = 2) 
    }
    points(x2[, list(X2, Value)], pch = 16, cex = point.cex, col = "indianred")
    lines( x2[, list(X2, Value)], lwd = lwd, col = "indianred")
    }
    
  
  #Add axis
  if (suppressAxis == FALSE){
    if(is.na(stacked)) axis(1, cex.axis = 1)
    if(!is.na(stacked)){
      if(stacked!= 'A') axis(3, cex.axis = 1.5, tck = 0.1, labels = F)
    }
  }

  #Stacked axes with 0 overlap so need to remove
  labels <- round((axTicks(2) / scale.axis), 5)
  if(labels[1] == 0) labels[1] <- ''
  axis(2, at = axTicks(2), labels = labels, cex.axis = rel.y.num,
       las = T)

    #Add axis labels
    if(!website){
      if(!is.na(stacked)) text(u[1], u[4], labels = stacked, cex = cex.stacked, adj = c(-0.5, 1.5))
    } else if (website){
      text(u[1], u[4], labels = "", cex = cex.stacked, adj = c(-0.5, 1.5))
    }
    if(is.na(stacked)){
      mtext(1, text = x.label, line = x.line, cex = 1)
      mtext(2, text = y.label, line = y.line, cex = rel.y.text)
    }
  
    if (full.trend == T){
    #Split data into past decade and full time series
    dat <- as.data.frame(x[, list(X, Value)])
    
    dat <- dat %>% dplyr::rename(series = Value) %>%
      mutate(time = seq(1,nrow(dat),1))
    
    # Fit linear model
    lm_out <- fit_lm(dat = dat)
    p <- lm_out$p
    if (p < .05){
        
      newtime <- seq(min(dat$time), max(dat$time), length.out=length(dat$time))
      newdata <- data.frame(time = newtime,
                      time2 = newtime^2)
      lm_pred <- AICcmodavg::predictSE(lm_out$model, 
                                 newdata = newdata,
                                 se.fit = TRUE)

      year <- seq(x$X[1],x$X[length(x$X)],length.out = length(dat$time))

      # Make plot
      if (lm_pred$fit[length(lm_pred$fit)] > lm_pred$fit[1]){
        lines(year, lm_pred$fit, col = main.pos, lwd = 7)
        points(x[, list(X, Value)], pch = 16, cex = point.cex)
        lines( x[, list(X, Value)], lwd = lwd)

        if (line.forward == TRUE){
           lines(year, lm_pred$fit, col = main.pos, lwd = 7)
        }
      } else if (lm_pred$fit[length(lm_pred$fit)] < lm_pred$fit[1]){
        lines(year, lm_pred$fit, col = main.neg, lwd = 7)
        points(x[, list(X, Value)], pch = 16, cex = point.cex)
        lines( x[, list(X, Value)], lwd = lwd)
        if (line.forward == TRUE){
           lines(year, lm_pred$fit, col = main.neg, lwd = 7)
        }
      }
    }
    
    if (extra == TRUE){
      
      # Second variable
      dat <- as.data.frame(x2[, list(X2, Value)])
    
      dat <- dat %>% dplyr::rename(series = Value) %>%
      mutate(time = seq(1,nrow(dat),1))
    
     # Fit linear model
      lm_out <- fit_lm(dat = dat)
      p <- lm_out$p
      points(x2[, list(X2, Value)], pch = 16, cex = point.cex, col = "indianred")
      lines( x2[, list(X2, Value)], lwd = lwd, col = "indianred")
      if (p < .05){
    
        newtime <- seq(min(dat$time), max(dat$time), length.out=length(dat$time))
        newdata <- data.frame(time = newtime,
                      time2 = newtime^2)
        lm_pred <- AICcmodavg::predictSE(lm_out$model, 
                                 newdata = newdata,
                                 se.fit = TRUE)

        year <- seq(x2$X2[1],x2$X2[length(x2$X2)],length.out =length(dat$time))
   
    # Make plot
        if (lm_pred$fit[length(lm_pred$fit)] > lm_pred$fit[1] ){
          lines(year, lm_pred$fit, col = main.pos, lwd = 7)
          points(x2[, list(X2, Value)], pch = 16, cex = point.cex, col = "indianred")
          lines( x2[, list(X2, Value)], lwd = lwd, col = "indianred")
        } else if (lm_pred$fit[length(lm_pred$fit)] < lm_pred$fit[1]){
          lines(year, lm_pred$fit, col = main.neg, lwd = 7)
          points(x2[, list(X2, Value)], pch = 16, cex = point.cex, col = "indianred")
          lines( x2[, list(X2, Value)], lwd = lwd, col = "indianred")
        } 
     }
    }

  }


 
}  


#Add axis labels for stacked plots
soe.stacked.axis <- function(x.label, y.label, x.line = 2.5,rel.x.text = 1.5,
                             y.line = 3.5, rel.y.text = 1.5, outer = TRUE){
  axis(1, cex.axis = rel.x.text)
  mtext(1, text = x.label, line = x.line, cex = rel.x.text, outer = outer)
  mtext(2, text = y.label, line = y.line, cex = rel.y.text, outer = outer)
  
}


#Background colors
background   <- 'white'
recent       <- '#E6E6E6'
main.pos <- rgb(253/255, 184/255, 99/255,  alpha = .9)
main.neg <- rgb(178/255, 171/255, 210/255, alpha = .9)

#Finder function for quickly finding variables based on partial match
finder <- function(data, match = match, factor = T){
  found <- unique(data[grepl(match,data$Var),]$Var)
  if (factor == T){
    return(found)
  } else {
    return(as.character(found))
  }
  
}


#thermal habitat map function
th_plot <- function(data, letter, z.max, y.axis = T,
                    legend = T, pos){
  if (pos == 'topleft'){
    par(mar=c(3.9, 2.8,3.5,0), mex = .3,  mgp = c(4, .35, 0))
  } else if (pos == 'topright'){
    par(mar=c(3.9, 0, 3.5, 2.8), mex = .3,  mgp = c(4, .35, 0))
  } else if (pos == "bottomleft"){
    par(mar=c(3.9,2.8,3.5,0), mex = .3,  mgp = c(4, .35, 0))
  } else if (pos == "bottomright"){
    par(mar=c(3.9, 0, 3.5, 2.8), mex = .3,  mgp = c(4, .35, 0))
  }
  
  data <- nc_open(data)
  
  #longitude
  lon <- ncvar_get(data, "xi", verbose = F)
  
  #latitude
  lat <- ncvar_get(data, "yi", verbose = F)
  
  #thermal habitat projection
  z <- ncvar_get(data, "zi")
  
  #combine in data.frame
  proj <- data.frame(lon = lon,
                     lat = lat,
                     z = z)
  
  proj <- proj %>% filter(z != "NA",z>0) %>% 
    mutate(z = plyr::mapvalues(z, from = (z[(z>z.max)]), to = rep(z.max,length(z[(z>z.max)]))))
  
  #turn dataframe to raster
  coordinates(proj) = ~lon+lat
  proj4string(proj)=map.crs # set it to lat-long
  proj = spTransform(proj,map.crs)
  proj <- proj[strata,]
  gridded(proj) = TRUE
  r = raster(proj)
  projection(r) = map.crs
  
  colors <- matlab.like(120)
  #plot maps
  if (legend == T){
    plot(r, col=colors, ylim=c(35,45),
         breaks=seq(0,z.max,length.out=length(colors)),
         zlim = c(0,z.max),
         legend.width = 2,
         axes=F, interpolate = T, las = 1,box = T,
         axis.args=list(at=seq(0, z.max, length.out = 5),
                        labels=round(seq(0,1,length.out = 5),1), 
                        cex.axis=0.8),
         legend.args=list(text=expression(paste("     Thermal \n      Habitat")),
                          side=3, font=2, line=1, cex=.65))
  } else {
    plot(r, col=colors, ylim=c(35,45),
         breaks=seq(0,z.max,length.out=length(colors)),
         axes=F, interpolate = F, las = 1,box = T,legend = F)
  }
  
  
  map("worldHires", xlim=c(-77,-65),ylim=c(35,45), fill=T,border=0,col="gray", add = T)
  
  if (y.axis == T){
    map.axes(cex.axis = .7)
  } else if (y.axis == F){
    axis(1,cex = .7)
    box(lty = 'solid', col = 'black',lwd = 1)
  }
  
  
  contour(th,drawlabels = F,nlevels = 2,add=T, col = "gray20",lty=2, lwd = .5)
  text(-75.5, 43.9, letter,cex = 1.5)
  
}


```


```{r rec_catch_MAB, fig.cap="Total recreational harvest  \\label{recfood}", echo = F, message=F, include=T, warning=F, fig.asp=0.45, fig.align = 'center',fig.pos='H'}

opar <- par(mar = c(4, 6, 2, 6))

soe.plot(SOE.data.2018, "Time", "Recreational Seafood MA", scale.axis = 10^6,
         end.start = 2008, x.label = 'Year', rel.y.text = 1, rel.y.num = 1.1,
         y.line = 2.5, y.label = expression("Fish caught, 10"^6 *" n"), website = F)
```