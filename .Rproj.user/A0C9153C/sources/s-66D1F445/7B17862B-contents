#Monte Carlo simulations for MAE
rm(list = ls())
library(boot);library(Kendall)
library(zoo);library(zyp)
library(trend);library(dplyr)
library(AICcmodavg)
#setwd("z:/shardison/soe/simulations/one_in_many_approach")
setwd('c:/users/sean.hardison/desktop/simulations')
rmse <- function(actual,predicted){
  sqrt(mean((actual-predicted)^2))
}

mae <- function(actual, predicted){
  mean(abs(actual-predicted))
}

fit_lm <- function(dat) {
  # Remove missing values first so that all models
  # use the same number of observations (important for AIC)
  dat <- dat %>% dplyr::filter(complete.cases(.))
  
  # Constant model (null model used to calculate 
  # overall p-value)
  constant_norm <-
    nlme::gls(series ~ 1, 
              data = dat)
  
  constant_ar1 <-
    try(nlme::gls(series ~ 1,
                  data = dat,
                  correlation = nlme::corAR1(form = ~time)))
  if (class(constant_ar1) == "try-error"){
    return(best_lm <- data.frame(model = NA,
                                 aicc  = NA,
                                 coefs..Intercept = NA,
                                 coefs.time = NA,
                                 coefs.time2 = NA,
                                 pval = NA))
    
  } 
  
  
  
  # Linear model with normal error
  linear_norm <- 
    nlme::gls(series ~ time, 
              data = dat)
  
  # Linear model with AR1 error
  linear_ar1 <- 
    try(nlme::gls(series ~ time, 
                  data = dat,
                  correlation = nlme::corAR1(form = ~time)))
  if (class(linear_ar1) == "try-error"){
    return(best_lm <- data.frame(model = NA,
                                 aicc  = NA,
                                 coefs..Intercept = NA,
                                 coefs.time = NA,
                                 coefs.time2 = NA,
                                 pval = NA))
    
  }
  
  # Polynomial model with normal error
  dat$time2 <- dat$time^2
  poly_norm <- 
    nlme::gls(series ~ time + time2, 
              data = dat)
  
  # Polynomial model with AR1 error
  poly_ar1 <- 
    try(nlme::gls(series ~ time + time2, 
                  data = dat,
                  correlation = nlme::corAR1(form = ~time)))
  if (class(poly_ar1) == "try-error"){
    return(best_lm <- data.frame(model = NA,
                                 aicc  = NA,
                                 coefs..Intercept = NA,
                                 coefs.time = NA,
                                 coefs.time2 = NA,
                                 pval = NA))
    
  }
  
  # Calculate AICs for all models
  df_aicc <-
    data.frame(model = c("poly_norm",
                         "poly_ar1",
                         "linear_norm",
                         "linear_ar1"),
               aicc  = c(AICc(poly_norm),
                         AICc(poly_ar1),
                         AICc(linear_norm),
                         AICc(linear_ar1)),
               coefs = rbind(coef(poly_norm),
                             coef(poly_ar1),
                             c(coef(linear_norm), NA),
                             c(coef(linear_ar1),  NA)),
               # Calculate overall signifiance (need to use
               # ML not REML for this)
               pval = c(anova(update(constant_norm, method = "ML"),
                              update(poly_norm, method = "ML"))$`p-value`[2],
                        anova(update(constant_ar1, method = "ML"),
                              update(poly_ar1, method = "ML"))$`p-value`[2],
                        anova(update(constant_norm, method = "ML"),
                              update(linear_norm, method = "ML"))$`p-value`[2],
                        anova(update(constant_ar1, method = "ML"),
                              update(linear_ar1, method = "ML"))$`p-value`[2]))
  
  best_lm <-
    df_aicc %>%
    dplyr::filter(aicc == min(aicc))
  
  
  if (best_lm$model == "poly_norm") {
    model <- poly_norm
  } else if (best_lm$model == "poly_ar1") {
    model <- poly_ar1
  } else if (best_lm$model == "linear_norm") {
    model <- linear_norm
  } else if (best_lm$model == "linear_ar1") {
    model <- linear_ar1
  }
  
  return(list(best_lm = best_lm, 
              model = model))
}

n = 1000 #number of simulations
ARsd <- .54^.5 #standard deviation


#set phi
NOAR <- list()

medAR <- 0.433
strongAR <- 0.8

#place holders for generated data
series <- NULL
mk.mae.NOAR.notrend <- NULL
mk.mae.NOAR.ltrendweak <- NULL
mk.mae.NOAR.ltrendmed <- NULL
mk.mae.NOAR.ltrendstrong <- NULL

mk.mae.medAR.notrend <- NULL
mk.mae.medAR.ltrendweak <- NULL
mk.mae.medAR.ltrendmed <- NULL
mk.mae.medAR.ltrendstrong <- NULL

mk.mae.strongAR.notrend <- NULL
mk.mae.strongAR.ltrendweak <- NULL
mk.mae.strongAR.ltrendmed <- NULL
mk.mae.strongAR.ltrendstrong <- NULL

gls.mae.NOAR.notrend <- NULL
gls.mae.NOAR.ltrendweak <- NULL
gls.mae.NOAR.ltrendmed <- NULL
gls.mae.NOAR.ltrendstrong <- NULL

gls.mae.medAR.notrend <- NULL
gls.mae.medAR.ltrendweak <- NULL
gls.mae.medAR.ltrendmed <- NULL
gls.mae.medAR.ltrendstrong <- NULL

gls.mae.strongAR.notrend <- NULL
gls.mae.strongAR.ltrendweak <- NULL
gls.mae.strongAR.ltrendmed <- NULL
gls.mae.strongAR.ltrendstrong <- NULL


for (m in c(10,20,30)){
  
  notrend <- rep(0,m)
  ltrendweak <- -0.262 + (0.0255 * c(1:m)) 
  ltrendmed <- -0.262 + (0.051 * c(1:m)) 
  ltrendstrong <- -0.262 + (0.147 * c(1:m)) 
  print(paste("m=",m))
  
  for (k in c("notrend","ltrendweak","ltrendmed","ltrendstrong")){
    
    for (j in c("NOAR","medAR","strongAR")){
      
      #Use true trend as base
      true_trend <- get(k)
      
      for (i in 1:n){
        print(i)
        #generate simulations
        dat <- arima.sim(list(ar = get(j)), n=m, rand.gen=rnorm, sd = ARsd)
        
        #add autocorrelated error structure to trend
        dat <- get(k) + dat
        
        #what fraction of the confidence intervals contain the original trendline?
        dat <- data.frame(series = dat,
                          time = 1:length(dat))
        
        #---------------------------------GLS---------------------------------#
        if (y == "notrend"){
          trend <- rep(0,x)
        } else if (y == "ltrendweak"){
          trend <- LTRENDweak
        } else if (y == "ltrendmed"){
          trend <- LTRENDmedium
        } else if (y == "LTEMP3"){
          trend <- LTRENDstrong
        }
        
        if (k == "NOAR"){
          TEMP_lm <- fit_lm(dat = data.frame(series = get(y) %>% as.numeric,
                                             time = 1:length(get(y))),
                            spec = TRUE, trend = trend, ar = unlist(get(k)),
                            m = x, ARsd = ARsd)
        } else {
          TEMP_lm <- fit_lm(dat = data.frame(series = get(y) %>% as.numeric,
                                             time = 1:length(get(y))), trend = trend,
                            ar = unlist(get(k)),m = x, ARsd = ARsd)
        }
        T_lm <- TEMP_lm$best_lm$pval
        
        
        gls_sim <- tryCatch({
          
          newtime <- seq(1, m, 1)
          newdata <- data.frame(time = newtime,
                                time2 = newtime^2)
          gls_sim <- fit_lm(dat = dat)
          gls_sim <- AICcmodavg::predictSE(gls_sim$model, 
                                           newdata = newdata,
                                           se.fit = T)
        }, 
        error = function(e) {
          print('error')
        })
        
        if (gls_sim == "error"){
          gls_pred <- rep(NA, m)
        } else {
          gls_pred <- gls_sim$fit #GLS trend
          gls_se <- gls_sim$se.fit
        }
        
        #---------------------------------MK---------------------------------#
        #fit Sen's estimator
        mk_pred <- zyp.sen(series~time, dat)
        mk_pred <- mk_pred$coefficients[1]+dat$time*abs(mk_pred$coefficients[2])
        
        #---------------------------------Error---------------------------------#
        
        #calculate mase
        mk_mae <- mae(actual = true_trend, predicted = mk_pred)
        if (is.na(gls_pred[1])){
          gls_mae <- 1e6
        } else{
          gls_mae <- mae(actual = true_trend, predicted = gls_pred)
        }
        
        # mae calculations
        assign(paste0("mk.mae.",j,".",k),rbind(get(paste0("mk.mae.",j,".",k)),mk_mae))
        assign(paste0("gls.mae.",j,".",k),rbind(get(paste0("gls.mae.", j,".",k)),gls_mae))
        
        
        
      } 
      
    }
  }
  sim_results = data.frame(mk.NOAR.ltrendweak = mk.mae.NOAR.ltrendweak,
                           mk.NOAR.ltrendmed = mk.mae.NOAR.ltrendmed,
                           mk.NOAR.ltrendstrong = mk.mae.NOAR.ltrendstrong,
                           mk.NOAR.notrend = mk.mae.NOAR.notrend,
                           
                           mk.medAR.ltrendweak = mk.mae.medAR.ltrendweak,
                           mk.medAR.ltrendmed = mk.mae.medAR.ltrendmed,
                           mk.medAR.ltrendstrong = mk.mae.medAR.ltrendstrong,
                           mk.medAR.notrend = mk.mae.medAR.notrend,
                           
                           mk.strongAR.ltrendweak = mk.mae.strongAR.ltrendweak,
                           mk.strongAR.ltrendmed = mk.mae.strongAR.ltrendmed,
                           mk.strongAR.ltrendstrong = mk.mae.strongAR.ltrendstrong,
                           mk.strongAR.notrend = mk.mae.strongAR.notrend,
                           
                           gls.NOAR.ltrendweak = gls.mae.NOAR.ltrendweak,
                           gls.NOAR.ltrendmed = gls.mae.NOAR.ltrendmed,
                           gls.NOAR.ltrendstrong = gls.mae.NOAR.ltrendstrong,
                           gls.NOAR.notrend = gls.mae.NOAR.notrend,
                           
                           gls.medAR.ltrendweak = gls.mae.medAR.ltrendweak,
                           gls.medAR.ltrendmed = gls.mae.medAR.ltrendmed,
                           gls.medAR.ltrendstrong = gls.mae.medAR.ltrendstrong,
                           gls.medAR.notrend = gls.mae.medAR.notrend,
                           
                           gls.strongAR.ltrendweak = gls.mae.strongAR.ltrendweak,
                           gls.strongAR.ltrendmed = gls.mae.strongAR.ltrendmed,
                           gls.strongAR.ltrendstrong = gls.mae.strongAR.ltrendstrong,
                           gls.strongAR.notrend = gls.mae.strongAR.notrend)
  
  names(sim_results) <- paste0(names(sim_results),'.',m)
  mk.mae.NOAR.ltrendweak <- NULL
  mk.mae.NOAR.notrend <- NULL
  mk.mae.NOAR.ltrendmed <- NULL
  mk.mae.NOAR.ltrendstrong <- NULL
  
  mk.mae.medAR.notrend <- NULL
  mk.mae.medAR.ltrendweak <- NULL
  mk.mae.medAR.ltrendmed <- NULL
  mk.mae.medAR.ltrendstrong <- NULL
  
  mk.mae.strongAR.notrend <- NULL
  mk.mae.strongAR.ltrendweak <- NULL
  mk.mae.strongAR.ltrendmed <- NULL
  mk.mae.strongAR.ltrendstrong <- NULL
  
  gls.mae.NOAR.notrend <- NULL
  gls.mae.NOAR.ltrendweak <- NULL
  gls.mae.NOAR.ltrendmed <- NULL
  gls.mae.NOAR.ltrendstrong <- NULL
  
  gls.mae.medAR.notrend <- NULL
  gls.mae.medAR.ltrendweak <- NULL
  gls.mae.medAR.ltrendmed <- NULL
  gls.mae.medAR.ltrendstrong <- NULL
  
  gls.mae.strongAR.notrend <- NULL
  gls.mae.strongAR.ltrendweak <- NULL
  gls.mae.strongAR.ltrendmed <- NULL
  gls.mae.strongAR.ltrendstrong <- NULL
  write.csv(sim_results, file = paste0("mae_results_",m,"_4_9.csv"))
}