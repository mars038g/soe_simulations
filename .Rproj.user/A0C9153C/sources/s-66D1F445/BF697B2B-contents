series <- get(y)[j:x]
time <- 1:length(series)
dat <- data.frame(series = series,
                  time = time)



fit_lm <- function(dat, ar, m, ARsd, trend, spec = FALSE){
  success <- FALSE
  while(!success){
    dat <- dat %>% dplyr::filter(complete.cases(.))
    
    # Constant model (null model used to calculate 
    # overall p-value)
    constant_norm <-nlme::gls(series ~ 1, data = dat)
    
    #spec parameter specifies whether arima.sim incorporated AR(1) error process. When there is no 
    #AR error in the time series, we switch the GLS models to all rely on a normal error generating process.
    if (!spec){
      constant_ar1 <-
        try(nlme::gls(series ~ 1,
                      data = dat,
                      correlation = nlme::corAR1(form = ~time)))
      if (class(constant_ar1) == "try-error"){
        return(best_lm <- data.frame(model = NA,
                                     aicc  = NA,
                                     coefs..Intercept = NA,
                                     coefs.time = NA,
                                     coefs.time2 = NA,
                                     pval = NA))
      }
      
    } else {
      constant_ar1 <-
        try(nlme::gls(series ~ 1,
                      data = dat))
      if (class(constant_ar1) == "try-error"){
        return(best_lm <- data.frame(model = NA,
                                     aicc  = NA,
                                     coefs..Intercept = NA,
                                     coefs.time = NA,
                                     coefs.time2 = NA,
                                     pval = NA))
      }
    }
    # Linear model with normal error
    linear_norm <- nlme::gls(series ~ time, data = dat)
    
    # Linear model with AR1 error
    if (!spec){
      linear_ar1 <- 
        try(nlme::gls(series ~ time, 
                      data = dat,
                      correlation = nlme::corAR1(form = ~time)))
      if (class(linear_ar1) == "try-error"){
        return(best_lm <- data.frame(model = NA,
                                     aicc  = NA,
                                     coefs..Intercept = NA,
                                     coefs.time = NA,
                                     coefs.time2 = NA,
                                     pval = NA))
      }
    } else {
      linear_ar1 <- 
        try(nlme::gls(series ~ time, 
                      data = dat))
      if (class(linear_ar1) == "try-error"){
        return(best_lm <- data.frame(model = NA,
                                     aicc  = NA,
                                     coefs..Intercept = NA,
                                     coefs.time = NA,
                                     coefs.time2 = NA,
                                     pval = NA))
      }
    }
    linear_phi <- linear_ar1$modelStruct$corStruct
    linear_phi <-coef(linear_phi, unconstrained = FALSE)
    
    # # Polynomial model with normal error
    # dat$time2 <- dat$time^2
    # poly_norm <- nlme::gls(series ~ time + time2, data = dat)
    # 
    # # Polynomial model with AR1 error
    # if (!spec){
    #   poly_ar1 <- 
    #     try(nlme::gls(series ~ time + time2, 
    #                   data = dat,
    #                   correlation = nlme::corAR1(form = ~time)))
    #   if (class(poly_ar1) == "try-error"){
    #     return(best_lm <- data.frame(model = NA,
    #                                  aicc  = NA,
    #                                  coefs..Intercept = NA,
    #                                  coefs.time = NA,
    #                                  coefs.time2 = NA,
    #                                  pval = NA))
    #     
    #   }
    # }else {
    #   poly_ar1 <- 
    #     try(nlme::gls(series ~ time + time2, 
    #                   data = dat))
    #   if (class(poly_ar1) == "try-error"){
    #     return(best_lm <- data.frame(model = NA,
    #                                  aicc  = NA,
    #                                  coefs..Intercept = NA,
    #                                  coefs.time = NA,
    #                                  coefs.time2 = NA,
    #                                  pval = NA))
    #     
    #   }
    # }
    # poly_phi <- poly_ar1$modelStruct$corStruct
    # poly_phi <- coef(poly_phi, unconstrained = FALSE)
    
    # Calculate AICs for all models
    df_aicc <-
      data.frame(model = c(#"poly_norm",
        #"poly_ar1",
        "linear_norm",
        "linear_ar1"),
        aicc  = c(#AICc(poly_norm),
          #AICc(poly_ar1),
          AICc(linear_norm),
          AICc(linear_ar1)),
        coefs = rbind(#coef(poly_norm),
          #coef(poly_ar1),
          c(coef(linear_norm), NA),
          c(coef(linear_ar1),  NA)),
        phi = c(#0, 
          #poly_phi,
          0,
          linear_phi),
        # Calculate overall signifiance (need to use
        # ML not REML for this)
        pval = c(#anova(update(constant_norm, method = "ML"),
          #     update(poly_norm, method = "ML"))$`p-value`[2],
          #anova(update(constant_ar1, method = "ML"),
          #      update(poly_ar1, method = "ML"))$`p-value`[2],
          anova(update(constant_norm, method = "ML"),
                update(linear_norm, method = "ML"))$`p-value`[2],
          anova(update(constant_ar1, method = "ML"),
                update(linear_ar1, method = "ML"))$`p-value`[2]))
    
    best_lm <-
      df_aicc %>%
      dplyr::filter(aicc == min(aicc))
    if (nrow(best_lm) >1){
      best_lm <- best_lm[1,]
    }
    phi <- best_lm$phi
    success <- (phi <= 0.8 & !invalid(phi))
    
    
    dat <- trend + dat
    dat <- arima.sim(list(ar = ar), n=m, rand.gen=rnorm, sd = ARsd)
    dat <- data.frame(series = dat,
                      time = 1:length(dat))
    
  }
  # if (best_lm$model == "poly_norm") {
  #   model <- poly_norm
  # } else if (best_lm$model == "poly_ar1") {
  #   model <- poly_ar1
  # } else if (best_lm$model == "linear_norm") {
  #   model <- linear_norm
  # } else if (best_lm$model == "linear_ar1") {
  #   model <- linear_ar1
  # }
  
  if (best_lm$model == "linear_norm") {
    model <- linear_norm
  } else if (best_lm$model == "linear_ar1") {
    model <- linear_ar1
  }
  return(list(best_lm = best_lm, 
              model = model))
}